{"version":3,"sources":["webpack:///./src/templates/project.js","webpack:///./src/components/ContentHeader.js","webpack:///./src/components/Content.js","webpack:///./src/components/PrevNextPost.js","webpack:///./src/components/RelatedPosts.js","webpack:///./src/components/Article.js"],"names":["props","post","previous","next","location","title","description","cover","lang","path","isBlogPost","heroImg","pageQuery","Header","styled","colors","render","this","date","tags","Array","React","Component","ContentBody","content","dangerouslySetInnerHTML","__html","PrevNextPost","articles","i","item","node","posts","PostPreviewShort","PostDate","multilangPosts","useSiteMetadata","slug","language","key","to","ArticleWrapper","Article"],"mappings":"2FAAA,sIAoCA,UA3ByB,SAACA,GACxB,IAAMC,EAAOD,OAAb,eADkC,EAEPA,EAFO,YAE1BE,EAF0B,WAEhBC,EAFgB,OAIlC,OACE,uBAAQC,SAAUJ,EAAMI,UACtB,uBACEC,MAAOJ,cADT,MAEEK,YAAaL,EAFf,QAGEM,MAAON,qBAA0BA,oBAHnC,UAIEO,KAAMP,cAJR,SAKEQ,KAAMR,cALR,KAMES,YAAU,IAGZ,uBACEC,QAASV,qBAA0BA,oBADrC,UAEEI,MAAOJ,cAAiBI,QAG1B,uBAASJ,KAAMA,IAEf,uBAAcC,SAAd,EAAkCC,KAAMA,MAOvC,IAAMS,EAAN,c,+FCjCP,IAAMC,EAASC,IAAH,mFAAGA,CAAH,kCAEDC,IAFX,WAuBA,E,gLAjBEC,kBAAU,IAAD,EACgBC,KADhB,MACCC,EADD,OACOC,EADP,OAGP,OACE,yBACGD,GAAQ,8BADX,GAEGE,kBAAuBD,SAAvBC,GACC,kCACE,8BADF,OAEE,uBAASD,KAAMA,O,GAVAE,IAAMC,WCL3BC,EAAcT,IAAH,2EAAGA,CAAH,2lCA2DOC,IA3DP,sBAiEeA,IAjEf,kBAsECA,IAtED,uBAuFgBA,IAvFjC,OAuGA,IAXgB,SAACf,GAAW,IAClBwB,EAAwBxB,EADP,QACRkB,EAAelB,EADP,KACFmB,EAASnB,EADP,KAGzB,OACE,kCACImB,GAAD,IAAkB,qBAAeD,KAAf,EAA2BC,KAAMA,IACpD,qBAAaM,wBAAyB,CAAEC,OAAQF,Q,uFCnGhDG,E,gLACJX,kBAAU,IAAD,EACoBC,KADpB,MAEDW,EAAW,CAFV,mBAEU,QACP,SAAAC,GAAC,YADM,KAEV,SAAAC,GAAI,MAAK,CAAEC,KAAMD,MAExB,OACE,kCACE,2BADF,cAEE,uBAAcE,MAAOJ,M,GAVFP,IAAMC,WAgBjC,O,kCCpBA,yEAOMW,EAAmBnB,IAAH,wFAAGA,CAAH,CAAtB,uBAIMoB,EAAWpB,IAAH,iFAAGA,CAAH,CAAd,yCA4BA,IAvBqB,SAACd,GAAW,IACvBgC,EAAUhC,EADY,MAEtBmC,EAAmBC,cAFG,eAI9B,OACE,4BACGJ,EAAA,KAAU,YAAW,IAAD,EACW/B,OADX,YACXI,EADW,QACJgC,EADI,OACEnB,EADF,OAEboB,EAAWrC,6BAAjB,KAEA,OACE,qBAAkBsC,IAAKF,GACrB,yBAAWnB,GAAQ,8BADrB,IAEE,uBAAYsB,GAAE,IAAMH,GACjBF,GAAkB,uBAAMG,SAAUA,IAJzC,U,qFCtBR,IAAMG,EAAiB3B,IAAH,sFAAGA,CAAH,CAApB,6EAQM4B,E,gLACJ1B,kBAAU,IACAf,EAASgB,KADV,WAGP,OACE,yBACE,uBACEO,QAASvB,EADX,KAEEiB,KAAMjB,cAFR,KAGEkB,KAAMlB,cAAiBkB,S,GATXE,IAAMC,WAgB5B","file":"component---src-templates-project-js-1606312897ecd4305b1c.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport Hero from '../components/Hero';\nimport Article from '../components/Article';\nimport PrevNextPost from '../components/PrevNextPost';\nimport SEO from '../components/SEO';\n\nconst BlogPostTemplate = (props) => {\n  const post = props.data.markdownRemark;\n  const { previous, next } = props.pageContext;\n\n  return (\n    <Layout location={props.location}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.excerpt}\n        cover={post.frontmatter.cover && post.frontmatter.cover.publicURL}\n        lang={post.frontmatter.language}\n        path={post.frontmatter.slug}\n        isBlogPost\n      />\n\n      <Hero\n        heroImg={post.frontmatter.cover && post.frontmatter.cover.publicURL}\n        title={post.frontmatter.title}\n      />\n\n      <Article post={post} />\n\n      <PrevNextPost previous={previous} next={next} />\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      id\n      excerpt\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        language\n        tags\n        cover {\n          publicURL\n        }\n      }\n    }\n  }\n`;\n","import React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport TagList from './TagList';\nimport { colors } from '../tokens';\n\nconst Header = styled.header`\n  margin-bottom: 2rem;\n  color: ${colors.textLight};\n`;\n\nclass ContentIntro extends React.Component {\n  render() {\n    const { date, tags } = this.props;\n\n    return (\n      <Header>\n        {date && <time>{date}</time>}\n        {Array.isArray(tags) && tags.length > 0 && (\n          <Fragment>\n            <span> in</span>\n            <TagList tags={tags} />\n          </Fragment>\n        )}\n      </Header>\n    );\n  }\n}\n\nexport default ContentIntro;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ContentHeader from './ContentHeader';\nimport { colors } from '../tokens';\n\nconst ContentBody = styled.div`\n  line-height: 1.6;\n\n  & > h2 {\n    padding-top: 3rem;\n    margin-top: 3rem;\n    border-top: 1px solid #ececec;\n  }\n\n  & > h3 {\n    padding-top: 3rem;\n  }\n\n  & > p {\n    margin: 1em 0 0 0;\n  }\n\n  & a {\n    border-bottom: 1px solid rgba(162, 162, 162, 0.8);\n\n    &:hover {\n      border-bottom-style: solid;\n    }\n\n    &.anchor,\n    &.gatsby-resp-image-link {\n      border: none;\n    }\n  }\n\n  & > blockquote {\n    box-sizing: border-box;\n    margin: 1.75em 0 1.75em -2.2em;\n    padding: 0 0 0 1.75em;\n    border-left: 0.4em solid rgba(32, 35, 42, 0.85);\n  }\n\n  & > blockquote p {\n    margin: 0.8em 0;\n    font-style: italic;\n  }\n\n  & .gatsby-highlight {\n    border-radius: 5px;\n    font-size: 15px;\n    line-height: 1.7;\n    border-radius: 10px;\n    overflow: auto;\n    tab-size: 1.5em;\n    margin: 1.5em 0em 1.5em 0;\n  }\n\n  & .gatsby-highlight > pre {\n    border: 0;\n    margin: 0;\n    padding: 1;\n  }\n\n  & .gatsby-highlight-code-line {\n    background-color: ${colors.highlight_code_linebg};\n    display: block;\n    margin-right: -1em;\n    margin-left: -1em;\n    padding-right: 1em;\n    padding-left: 0.75em;\n    border-left: 0.25em solid ${colors.highlight_code_bg};\n  }\n\n  & p > code.language-text,\n  & li > code.language-text {\n    background: ${colors.highlight_code_oneline};\n    color: #222222cc;\n    padding: 0 3px;\n    font-size: 0.94em;\n    border-radius: 0.3rem;\n  }\n\n  & table {\n    margin-top: 1em;\n    border-collapse: collapse;\n    border-radius: 0.5em;\n    overflow: hidden;\n\n    & th,\n    & td {\n      padding: 0.5em;\n      background: #e8e8e8;\n      border-bottom: 2px solid ${colors.white};\n    }\n  }\n`;\n\nconst Content = (props) => {\n  const { content, date, tags } = props;\n\n  return (\n    <section>\n      {(tags || date) && <ContentHeader date={date} tags={tags} />}\n      <ContentBody dangerouslySetInnerHTML={{ __html: content }} />\n    </section>\n  );\n};\n\nexport default Content;\n","import React, { Fragment } from 'react'\nimport RelatedPosts from './RelatedPosts'\nimport { Text } from './Commons'\n\nclass PrevNextPost extends React.Component {\n  render() {\n    const { previous, next } = this.props\n    const articles = [previous, next]\n      .filter(i => i)\n      .map(item => ({ node: item }))\n\n    return (\n      <Fragment>\n        <Text>Read next:</Text>\n        <RelatedPosts posts={articles} />\n      </Fragment>\n    )\n  }\n}\n\nexport default PrevNextPost\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { StyledLink } from './Commons';\nimport Flag from './Flag/Flag';\nimport useSiteMetadata from '../hooks/use-site-config';\n\nconst PostPreviewShort = styled.li`\n  margin: 18px 0 6px;\n`;\n\nconst PostDate = styled.div`\n font-size: .875rem;\n font-style: italic;\n`;\n\nconst RelatedPosts = (props) => {\n  const { posts } = props;\n  const { multilangPosts } = useSiteMetadata();\n\n  return (\n    <ul>\n      {posts.map((post) => {\n        const { title, slug, date } = post.node.frontmatter;\n        const language = post.node.frontmatter.language || 'en';\n\n        return (\n          <PostPreviewShort key={slug}>\n            <PostDate>{date && <time>{date}</time>}</PostDate>\n            <StyledLink to={`/${slug}`}>\n              {multilangPosts && <Flag language={language} />}\n              {title}\n            </StyledLink>\n          </PostPreviewShort>\n        );\n      })}\n    </ul>\n  );\n};\nexport default RelatedPosts;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Content from './Content';\n\nconst ArticleWrapper = styled.article`\n  padding: 0 30px 30px;\n\n  @media only screen and (max-width: 500px) {\n    padding: 0;\n  }\n`;\n\nclass Article extends React.Component {\n  render() {\n    const { post } = this.props;\n\n    return (\n      <ArticleWrapper>\n        <Content\n          content={post.html}\n          date={post.frontmatter.date}\n          tags={post.frontmatter.tags}\n        />\n      </ArticleWrapper>\n    );\n  }\n}\n\nexport default Article;\n"],"sourceRoot":""}