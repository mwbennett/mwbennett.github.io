{"version":3,"sources":["webpack:///./src/components/ContentHeader.js","webpack:///./src/components/Content.js","webpack:///./src/components/TagList.js","webpack:///./src/templates/page.js"],"names":["Header","styled","colors","render","this","date","tags","Array","React","Component","ContentBody","props","content","dangerouslySetInnerHTML","__html","ListContainer","TagListItem","TagList","icon","key","i","to","tag","page","location","title","description","path","cover","publicURL","pageQuery"],"mappings":"wJAKA,IAAMA,EAASC,IAAH,mFAAGA,CAAH,kCAEDC,IAFX,WAuBA,E,gLAjBEC,kBAAU,IAAD,EACgBC,KADhB,MACCC,EADD,OACOC,EADP,OAGP,OACE,yBACGD,GAAQ,8BADX,GAEGE,kBAAuBD,SAAvBC,GACC,kCACE,8BADF,OAEE,uBAASD,KAAMA,O,GAVAE,IAAMC,WCL3BC,EAAcT,IAAH,2EAAGA,CAAH,2lCA2DOC,IA3DP,sBAiEeA,IAjEf,kBAsECA,IAtED,uBAuFgBA,IAvFjC,OAuGA,IAXgB,SAACS,GAAW,IAClBC,EAAwBD,EADP,QACRN,EAAeM,EADP,KACFL,EAASK,EADP,KAGzB,OACE,kCACIL,GAAD,IAAkB,qBAAeD,KAAf,EAA2BC,KAAMA,IACpD,qBAAaO,wBAAyB,CAAEC,OAAQF,Q,+FClGtD,IAAMG,EAAgBd,IAAH,6EAAGA,CAAH,kDAGRC,IAHX,WAMMc,EAAcf,YAAH,+EAAGA,CAAH,6FAENC,IAFM,UAKcA,IAL/B,WAYMe,E,gLACJd,kBAAU,IAAD,EACgBC,KADhB,MACCE,EADD,OACOY,EADP,OAGP,OACE,0BACGA,OAAiB,kCADpB,OAEGZ,EAAA,KAAS,qBACR,8BAAUa,IAAG,YAAcC,GACzB,qBAAaC,GAAE,SAAWC,GAD5B,GAEGF,EAAId,SAAJc,OAHK,S,GAPIZ,IAAMC,WAiB5B,O,kCCxCA,8GA0BA,UAnBa,SAACE,GACZ,IAAMY,EAAOZ,OAAb,eAEA,OACE,uBAAQa,SAAUb,EAAMa,UACtB,uBACEC,MAAOF,cADT,MAEEG,YAAaH,EAFf,QAGEI,KAAMJ,cAHR,KAIEK,MAAOL,qBAA0BA,oBAAuBM,YAG1D,iCACE,uBAASjB,QAASW,EAAlB,KAA6BlB,KAAMkB,cAAiBlB,UAQrD,IAAMyB,EAAN","file":"component---src-templates-page-js-e5a519cd4e0440796aef.js","sourcesContent":["import React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport TagList from './TagList';\nimport { colors } from '../tokens';\n\nconst Header = styled.header`\n  margin-bottom: 2rem;\n  color: ${colors.textLight};\n`;\n\nclass ContentIntro extends React.Component {\n  render() {\n    const { date, tags } = this.props;\n\n    return (\n      <Header>\n        {date && <time>{date}</time>}\n        {Array.isArray(tags) && tags.length > 0 && (\n          <Fragment>\n            <span> in</span>\n            <TagList tags={tags} />\n          </Fragment>\n        )}\n      </Header>\n    );\n  }\n}\n\nexport default ContentIntro;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ContentHeader from './ContentHeader';\nimport { colors } from '../tokens';\n\nconst ContentBody = styled.div`\n  line-height: 1.6;\n\n  & > h2 {\n    padding-top: 3rem;\n    margin-top: 3rem;\n    border-top: 1px solid #ececec;\n  }\n\n  & > h3 {\n    padding-top: 3rem;\n  }\n\n  & > p {\n    margin: 1em 0 0 0;\n  }\n\n  & a {\n    border-bottom: 1px solid rgba(162, 162, 162, 0.8);\n\n    &:hover {\n      border-bottom-style: solid;\n    }\n\n    &.anchor,\n    &.gatsby-resp-image-link {\n      border: none;\n    }\n  }\n\n  & > blockquote {\n    box-sizing: border-box;\n    margin: 1.75em 0 1.75em -2.2em;\n    padding: 0 0 0 1.75em;\n    border-left: 0.4em solid rgba(32, 35, 42, 0.85);\n  }\n\n  & > blockquote p {\n    margin: 0.8em 0;\n    font-style: italic;\n  }\n\n  & .gatsby-highlight {\n    border-radius: 5px;\n    font-size: 15px;\n    line-height: 1.7;\n    border-radius: 10px;\n    overflow: auto;\n    tab-size: 1.5em;\n    margin: 1.5em 0em 1.5em 0;\n  }\n\n  & .gatsby-highlight > pre {\n    border: 0;\n    margin: 0;\n    padding: 1;\n  }\n\n  & .gatsby-highlight-code-line {\n    background-color: ${colors.highlight_code_linebg};\n    display: block;\n    margin-right: -1em;\n    margin-left: -1em;\n    padding-right: 1em;\n    padding-left: 0.75em;\n    border-left: 0.25em solid ${colors.highlight_code_bg};\n  }\n\n  & p > code.language-text,\n  & li > code.language-text {\n    background: ${colors.highlight_code_oneline};\n    color: #222222cc;\n    padding: 0 3px;\n    font-size: 0.94em;\n    border-radius: 0.3rem;\n  }\n\n  & table {\n    margin-top: 1em;\n    border-collapse: collapse;\n    border-radius: 0.5em;\n    overflow: hidden;\n\n    & th,\n    & td {\n      padding: 0.5em;\n      background: #e8e8e8;\n      border-bottom: 2px solid ${colors.white};\n    }\n  }\n`;\n\nconst Content = (props) => {\n  const { content, date, tags } = props;\n\n  return (\n    <section>\n      {(tags || date) && <ContentHeader date={date} tags={tags} />}\n      <ContentBody dangerouslySetInnerHTML={{ __html: content }} />\n    </section>\n  );\n};\n\nexport default Content;\n","import React, { Fragment } from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\nimport { colors } from '../tokens';\n\nconst ListContainer = styled.div`\n  display: inline;\n  margin: 0 0.5rem 0 0;\n  color: ${colors.textLight};\n`;\n\nconst TagListItem = styled(Link)`\n  margin-left: 0.3rem;\n  color: ${colors.textLight};\n\n  &:hover {\n    border-bottom: 1px solid ${colors.textLight};\n  }\n  &:before {\n    content: '#';\n  }\n`;\n\nclass TagList extends React.Component {\n  render() {\n    const { tags, icon } = this.props;\n\n    return (\n      <ListContainer>\n        {icon === true && <Fragment>üè∑ </Fragment>}\n        {tags.map((tag, i) => (\n          <Fragment key={`tag-list-${i}`}>\n            <TagListItem to={`/tags/${tag}`}>{tag}</TagListItem>\n            {i < tags.length - 1 ? ', ' : ''}\n          </Fragment>\n        ))}\n      </ListContainer>\n    );\n  }\n}\nexport default TagList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport Content from '../components/Content';\nimport SEO from '../components/SEO';\n\nconst Page = (props) => {\n  const page = props.data.markdownRemark;\n\n  return (\n    <Layout location={props.location}>\n      <SEO\n        title={page.frontmatter.title}\n        description={page.excerpt}\n        path={page.frontmatter.slug}\n        cover={page.frontmatter.cover && page.frontmatter.cover.publicURL}\n      />\n\n      <article>\n        <Content content={page.html} date={page.frontmatter.date} />\n      </article>\n    </Layout>\n  );\n};\n\nexport default Page;\n\nexport const pageQuery = graphql`\n  query PageBySlug($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      id\n      excerpt\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        disqus\n        cover {\n          publicURL\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}